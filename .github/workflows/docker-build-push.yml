name: Build and Deploy Docker Images

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Git Ref
        required: true
        type: string

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{inputs.ref}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Calculate Image Tags
        env:
          INPUT_REF: ${{inputs.ref}}
        run: |
          declare TAGS=""
          case "${INPUT_REF}" in
          v[0-9]*.[0-9]*.[0-9]*)
            TAGS="${INPUT_REF}"
            if [[ "$(git rev-parse origin/main)" = "$(git rev-parse "${INPUT_REF}")" ]]; then
              TAGS="${TAGS} latest"
            elif [[ "$(git describe --tags --abbrev=0 origin/main)" = "${INPUT_REF}" ]]; then
              TAGS="${TAGS} latest"
            fi
            ;;
          *)
            TAGS="${INPUT_REF}"
            ;;
          esac

          if [[ -z "${TAGS}" ]]; then
            echo "Empty Tags!"
            exit 1
          fi

          REPO_OWNER="${{ github.repository_owner }}"
          REPO_OWNER_LOWER="${REPO_OWNER,,}"

          {
            echo 'DOCKER_IMAGE_TAGS<<EOF'
            for tag in ${TAGS}; do
            echo "ghcr.io/${REPO_OWNER_LOWER}/stremio-addon-debrid-search:${tag}"
            done
            echo EOF
          } >> "${GITHUB_ENV}"

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
          context: .
          file: ./Dockerfile
          tags: ${{env.DOCKER_IMAGE_TAGS}}
